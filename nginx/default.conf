# Sets up definition of an upstream that we are calling client. 
upstream client {
    # it is located at client:3000 (domain name or url, how you can access it) (client is how we referred to in in docker-compose file)
    server client:3000;
}

# we will change server name to api since server is a keyword, to make nginx happy
upstream api {
    server api:5000;
}

server {
    # listen on 80 port of the container
    listen 80;

    # set up our twi routing rules
    # if anyone evr goes to /, set up a proxy and pass this request to the client upstream
    location / {
        proxy_pass http://client;
    }
    # allow websocket to connect from that specific endpoint to the React develop server (client), in order to fix the error
    location /sockjs-node {
        proxy_pass http://client;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
    }

    location /api {
        # this configures so that nginx slices off the /api when it returns reuest
        # apply reges of /api (/api/(.*)) if we match anything to this, take off teh api and leave it as $1, wwhatevr text was  matched by regex (.*)
        # break, directive to not add any other rwrite rules after the one we passed. 
        rewrite /api/(.*) /$1 break;
        proxy_pass http://api;
    }
}